---
import ReportLayout from '../../layouts/ReportLayout.astro';
const pageTitle = 'Listado de respuestas';
---
<ReportLayout title={pageTitle} current="responses" noIndex>
  <main class="admin-shell">
    <section class="admin-card">
      <div class="admin-header">
        <a id="back-link" class="back-link" href="/gemini">← Volver al reporte</a>
        <div>
          <h1>{pageTitle}</h1>
          <p class="subtitle">Busca por nombre o correo. Desplázate para cargar más respuestas.</p>
        </div>
      </div>

      <div class="search-box">
        <input id="q" class="search-input" type="search" placeholder="Buscar por nombre o correo..." autocomplete="off" />
      </div>

      <div class="list-meta">
        <div id="count">Cargando…</div>
        <small>Índice servido desde <code>public/respuestas-index.json</code></small>
      </div>

      <div id="list" class="list" role="list"></div>
      <div id="sentinel" class="sentinel" aria-hidden="true"></div>
    </section>
  </main>

  <style>
    body {
      background: var(--bg-primary);
      color: var(--text-primary);
    }

    .admin-shell {
      max-width: 1120px;
      margin: 0 auto;
      padding: 40px 20px 72px;
    }

    .admin-card {
      background: var(--card-bg);
      border-radius: 16px;
      box-shadow: 0 20px 45px rgba(15, 23, 42, 0.08);
      padding: 32px;
      border: 1px solid var(--border);
    }

    .admin-header {
      display: flex;
      flex-wrap: wrap;
      align-items: flex-start;
      gap: 16px;
      margin-bottom: 24px;
    }

    .back-link {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      font-weight: 600;
      color: var(--color-company);
      text-decoration: none;
      background: rgba(37, 99, 235, 0.08);
      border-radius: 999px;
      padding: 6px 14px;
      transition: background 0.2s ease, color 0.2s ease;
    }

    .back-link:hover {
      background: rgba(37, 99, 235, 0.12);
      color: var(--color-company);
    }

    h1 {
      margin: 0;
      font-size: 1.9rem;
      color: var(--primary);
      letter-spacing: -0.02em;
    }

    .subtitle {
      margin: 8px 0 18px;
      color: var(--text-secondary);
      font-size: 0.95rem;
    }

    .search-box {
      position: sticky;
      top: 80px;
      z-index: 5;
      padding: 16px 0;
      background: var(--card-bg);
    }

    .search-input {
      width: 100%;
      padding: 14px 16px;
      border: 1px solid var(--border);
      border-radius: 12px;
      font-size: 1rem;
      background: var(--bg-primary);
      transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

    .search-input:focus {
      outline: none;
      border-color: var(--color-company);
      box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.15);
    }

    .list-meta {
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 10px;
      margin: 16px 0;
      color: var(--text-secondary);
      font-size: 0.9rem;
    }

    .list {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
      gap: 14px;
    }

    .item {
      border: 1px solid var(--border);
      border-radius: 14px;
      padding: 16px;
      background: var(--bg-primary);
      box-shadow: 0 4px 12px rgba(15, 23, 42, 0.05);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .item:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 18px rgba(15, 23, 42, 0.08);
    }

    .item a {
      color: inherit;
      text-decoration: none;
    }

    .name {
      font-weight: 600;
      font-size: 1rem;
      color: var(--primary);
    }

    .email {
      margin-top: 4px;
      color: var(--text-secondary);
      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;
      font-size: 0.9rem;
    }

    .empty {
      grid-column: 1 / -1;
      text-align: center;
      color: var(--text-secondary);
      padding: 40px 0;
    }

    .sentinel {
      height: 1px;
    }

    @media (max-width: 768px) {
      .admin-card {
        padding: 24px 20px;
      }

      .search-box {
        top: 90px;
      }
    }
  </style>

  <script>
    const listEl = document.getElementById('list');
    const countEl = document.getElementById('count');
    const qEl = document.getElementById('q');
    const sentinel = document.getElementById('sentinel');
    const backLink = document.getElementById('back-link');

    const DEFAULT_BACK = '/gemini';
    if (backLink) {
      let href = DEFAULT_BACK;
      let label = '← Volver al reporte';
      try {
        const ref = document.referrer ? new URL(document.referrer) : null;
        if (ref && /^\/(gemini|openai)(\/.+)?$/.test(ref.pathname)) {
          href = ref.pathname;
          label = ref.pathname.includes('openai') ? '← Volver al reporte OpenAI' : '← Volver al reporte Gemini';
        }
      } catch (err) {
        console.debug('Referrer parse error', err);
      }
      backLink.href = href;
      backLink.textContent = label;
    }

    const BATCH_SIZE = 50;
    let DATA = [];
    let filtered = [];
    let visible = 0;

    function normalize(str) {
      if (!str) return '';
      try {
        return str.normalize('NFD').replace(/[\u0300-\u036f]/g, '').toLowerCase().trim();
      } catch {
        return String(str).toLowerCase().trim();
      }
    }

    function render() {
      listEl.innerHTML = '';
      const slice = filtered.slice(0, visible);
      for (const item of slice) {
        const row = document.createElement('article');
        row.className = 'item';
        row.setAttribute('role', 'listitem');
        row.innerHTML = `
          <a href="/empleados/${item.id}">
            <div class="name">${item.nombreCompleto}</div>
            <div class="email">${item.email || '—'}</div>
          </a>
        `;
        listEl.appendChild(row);
      }
      if (slice.length === 0) {
        const empty = document.createElement('div');
        empty.className = 'empty';
        empty.textContent = 'No se encontraron resultados';
        listEl.appendChild(empty);
      }
      countEl.textContent = `${filtered.length} resultado(s)`;
    }

    function applyFilter() {
      const q = normalize(qEl.value);
      if (!q) {
        filtered = DATA.slice();
      } else {
        filtered = DATA.filter(x => x.nombreL.includes(q) || x.emailL.includes(q));
      }
      visible = Math.min(BATCH_SIZE, filtered.length);
      render();
    }

    let debounceId;
    qEl.addEventListener('input', () => {
      clearTimeout(debounceId);
      debounceId = setTimeout(applyFilter, 220);
    });

    const io = new IntersectionObserver(entries => {
      for (const entry of entries) {
        if (entry.isIntersecting && filtered.length > visible) {
          visible = Math.min(filtered.length, visible + BATCH_SIZE);
          render();
        }
      }
    });
    io.observe(sentinel);

    async function init() {
      try {
        countEl.textContent = 'Cargando…';
        const res = await fetch('/respuestas-index.json', { cache: 'no-store' });
        if (!res.ok) throw new Error('No se pudo cargar el índice');
        const raw = await res.json();
        DATA = raw.map(x => ({
          ...x,
          nombreL: x.nombreL || normalize(x.nombreCompleto),
          emailL: x.emailL || normalize(x.email),
        }));
        applyFilter();
      } catch (error) {
        console.error(error);
        listEl.innerHTML = '<div class="empty">Error al cargar el índice</div>';
        countEl.textContent = '';
      }
    }

    init();
  </script>
</ReportLayout>
