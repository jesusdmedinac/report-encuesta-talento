---
import { promises as fs } from 'fs';
import path from 'path';
import "../../styles/global.css";
import { mapScoreToBaremadoDecile, selectBaremosScope, getDecilesForScope } from "../../scripts/services/baremos.js";
import { OPEN_ENDED_QUESTIONS } from "../../scripts/config.js";

export async function getStaticPaths() {
  const dir = path.resolve(process.cwd(), 'src/data/individual');
  try {
    const files = await fs.readdir(dir);
    const jsons = files.filter(f => f.endsWith('.json'));
    return jsons.map(f => ({ params: { id: f.replace('.json', '') } }));
  } catch {
    return [];
  }
}

const { id } = Astro.params;
const dataPath = path.resolve(process.cwd(), 'src/data/individual', `${id}.json`);
const exists = await fs.access(dataPath).then(() => true).catch(() => false);
let doc = null;
if (exists) {
  const raw = await fs.readFile(dataPath, 'utf8');
  doc = JSON.parse(raw);
}

function avgDimension(scores) {
  if (!scores) return 0;
  const vals = Object.values(scores).filter(v => typeof v === 'number' && v > 0);
  if (!vals.length) return 0;
  const s = vals.reduce((a, b) => a + b, 0);
  return +(s / vals.length).toFixed(2);
}

function toTen(n) {
  return +(Number(n) * 2.5).toFixed(1);
}

const tiles = [
  { key: 'madurezDigital', label: 'Madurez Digital' },
  { key: 'brechaDigital', label: 'Competencias Digitales' },
  { key: 'usoInteligenciaArtificial', label: 'Uso de IA' },
  { key: 'culturaOrganizacional', label: 'Cultura Digital' },
].map(t => {
  const raw = avgDimension(doc?.scores?.[t.key]);
  return { ...t, raw, value: toTen(raw) };
});

function levelLabel10(v10) {
  if (v10 <= 6.25) return { text: 'Bajo', cls: 'lvl-low' };
  if (v10 <= 9.25) return { text: 'Medio', cls: 'lvl-mid' };
  return { text: 'Alto', cls: 'lvl-high' };
}

function levelFromSummary(s, fallbackValue) {
  const lbl = s?.level_label;
  if (lbl && typeof lbl === 'string') {
    const L = lbl.toLowerCase();
    if (L.includes('avanz')) return { text: lbl, cls: 'lvl-high' };
    if (L.includes('desarrollo')) return { text: lbl, cls: 'lvl-mid' };
    if (L.includes('inicial')) return { text: lbl, cls: 'lvl-low' };
    // Si viene otro texto, mostrarlo con clase media por defecto
    return { text: lbl, cls: 'lvl-mid' };
  }
  return levelLabel10(fallbackValue);
}

const dimsOrder = ['madurezDigital','brechaDigital','usoInteligenciaArtificial','culturaOrganizacional'];
const dimLabels = {
  madurezDigital: 'Madurez Digital',
  brechaDigital: 'Competencias Digitales',
  usoInteligenciaArtificial: 'Uso de IA',
  culturaOrganizacional: 'Cultura Digital',
  adaptabilidad: 'Adaptabilidad',
  resolucionDeProblemas: 'Resolución de Problemas',
  proactividadDigital: 'Proactividad Digital',
  analisisDeDatos: 'Análisis de Datos',
  alfabetizacionDeDatos: 'Alfabetización de Datos',
  colaboracionDigital: 'Colaboración Digital',
  ciberseguridad: 'Ciberseguridad',
  frecuenciaDeUso: 'Frecuencia de Uso',
  habilidadDeUso: 'Habilidad de Uso',
  nivelDeAdopcion: 'Nivel de Adopción',
  percepcionDeRiesgo: 'Percepción de Riesgo',
  eticaYVerificacion: 'Ética y Verificación',
  liderazgoYVision: 'Liderazgo y Visión',
  ambienteDeAprendizaje: 'Ambiente de Aprendizaje',
  apoyoOrganizacional: 'Apoyo Organizacional',
  experimentacion: 'Experimentación',
  reconocimiento: 'Reconocimiento',
  interesEnAprendizaje: 'Interés en Aprendizaje'
}
---
<!doctype html>
<html lang="es">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Empleado {id}</title>
    <meta name="robots" content="noindex" />
    <style>
      .container { max-width: 1000px; margin: 0 auto; padding: 24px; }
      .topbar { display:flex; justify-content: space-between; align-items: center; gap: 12px; }
      .muted { color: #64748b; }
      .card { border:1px solid #e5e7eb; border-radius: 12px; padding: 16px; margin: 16px 0; page-break-inside: avoid; }
      .grid-2 { display: grid; grid-template-columns: 1fr 1fr; gap: 16px; }
      @media (max-width: 900px) { .grid-2 { grid-template-columns: 1fr; } }
      h1 { margin: 8px 0; font-size: 1.5rem; }
      h2 { margin: 0 0 8px; font-size: 1.15rem; }
      .pill {display:inline-block; background:#eef2ff; color:#3730a3; padding:.1rem .5rem; border-radius:999px; font-size:.75rem; }
      .back { color: #1d4ed8; text-decoration: none; }
      .btn { background:#0ea5e9; color:#fff; border:none; padding:8px 12px; border-radius:8px; cursor:pointer; }
      .btn:focus { outline:2px solid #0284c7; outline-offset:2px; }

      .kpi-cards { display:grid; grid-template-columns: 1fr 1fr; gap: 16px; }
      @media (max-width: 900px) { .kpi-cards { grid-template-columns: 1fr; } }
      .kpi-card { border:1px solid #e5e7eb; border-radius:12px; padding:14px; background:#fff; page-break-inside: avoid; }
      .kpi-head { display:flex; align-items:center; justify-content: space-between; gap:8px; margin-bottom:8px; }
      .kpi-title { font-weight:600; }
      .kpi-val { font-size:1.6rem; font-weight:700; }
      .lvl { display:inline-block; margin-left:.5rem; padding:.1rem .45rem; border-radius:999px; font-size:.7rem; }
      .lvl-low { background:#fee2e2; color:#7f1d1d; }
      .lvl-mid { background:#fef3c7; color:#78350f; }
      .lvl-high { background:#dcfce7; color:#14532d; }

      .bar { 
        position: relative; 
        background:#f1f5f9; 
        border-radius: 999px; 
        height: 25px;
        overflow: hidden; 
      }
      .bar > i { 
        position: relative; 
        display:block; 
        height:100%; 
        background: linear-gradient(90deg, #2563EB, #4387ff); 
        z-index:1; 
      }
      /* Marcas de deciles 10–90% */
      .bar .tick { position:absolute; top:0; bottom:0; width:1px; background: #ccd1d8; z-index:2; }
      .bar .tick:first-child { border-left: none; }
      .row { display:flex; align-items:center; justify-content: space-between; gap:12px; }
      .row + .row { margin-top: 8px; }
      .row .name { min-width: 180px; font-size:.92rem; color:#0f172a; }
      .row .val { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; color:#334155; }

      .quotes { display:grid; grid-template-columns: 1fr 1fr; gap: 16px; }
      @media (max-width: 900px) { .quotes { grid-template-columns: 1fr; } }
      blockquote { font-style: italic; color:#334155; border-left:4px solid #e5e7eb; margin: 0; padding: 8px 12px; background:#f8fafc; border-radius: 8px; }
      .narrative { color:#334155; margin: 6px 0; }
      .chips { display:flex; flex-wrap: wrap; gap: 6px; margin-top: 6px; }
      .chip { background:#f1f5f9; color:#0f172a; border:1px solid #e2e8f0; padding: 2px 8px; border-radius: 999px; font-size: .75rem; }
      .deciles-table { width:100%; border-collapse: collapse; font-size:.85rem; }
      .deciles-table th, .deciles-table td { border:1px solid #e5e7eb; padding:6px 8px; text-align:left; }
      .deciles-table th { background:#f8fafc; }
      .row-hl { background:#f0f9ff; }

      @media print {
        .topbar .back, .topbar .btn { display:none; }
        .container { padding: 0; }
        .tile { -webkit-print-color-adjust: exact; print-color-adjust: exact; }
        h1 { font-size: 1.3rem; }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="topbar">
        <a href="/respuestas" class="back">← Volver al listado</a>
        <button class="btn" onclick="window.print()">Imprimir</button>
      </div>

      {doc ? (
        <>
          <header class="card">
            <div>
              <h1>{doc.header?.subject?.nombreCompleto}</h1>
              {doc.header?.subject?.email && (<div class="muted">{doc.header.subject.email}</div>)}
              <div class="muted">{doc.header?.empresa} · <span class="pill">{new Date(doc.header?.generatedAt).toLocaleString('es-ES')}</span></div>
              {(() => {
                const demo = doc?.header?.subject?.demographics || {};
                const labels = { rol: 'Rol', role: 'Rol', area: 'Área', nivelEducativo: 'Nivel educativo', educacion: 'Educación', antiguedad: 'Antigüedad', region: 'Región', sede: 'Sede', genero: 'Género' };
                const keys = Object.keys(labels).filter(k => demo[k]);
                return keys.length ? (
                  <div class="chips">
                    {keys.map(k => (<span class="chip"><strong>{labels[k]}:</strong>&nbsp;{demo[k]}</span>))}
                  </div>
                ) : null;
              })()}
            </div>
          </header>

          <blockquote>El presente informe muestra la descripción de la muestra, la confiabilidad de la escala y sus dimensiones mediante el coeficiente omega, los resultados generales y segmentados por variables sociodemográficas como género, edad, rol y nivel educativo, en función de las cuales se proponen baremos específicos por rol y nivel educativo.</blockquote>

          <section class="card">
            <h2>Resumen de KPIs (escala 1–10)</h2>
            <div class="kpi-cards">
              {dimsOrder.map(dim => {
                const tile = tiles.find(t => t.key === dim) || { value: 0 };
                const s = doc?.summary?.dimensions?.[dim] || { current10: tile.value, target10: 8.0, gap10: 0, collectiveAverage10: 0, percentile: 0 };
                const lvl = levelFromSummary(s, s.current10 ?? tile.value);
                const label = dimLabels[dim] || dim;
                const over = Number(((s.current10 ?? tile.value) - s.target10).toFixed(1));
                const overSign = over >= 0 ? '+' : '';
                const rel = Number(((s.current10 ?? tile.value) - s.collectiveAverage10).toFixed(1));
                const relSign = rel >= 0 ? '+' : '';
                const scope = selectBaremosScope({ subject: doc?.header?.subject }, dim);
                const dec = mapScoreToBaremadoDecile(dim, (s.current10 ?? tile.value), { scope });
                return (
                  <div class="kpi-card">
                    <div class="kpi-head">
                      <div class="kpi-title">{label}</div>
                      <div class="kpi-val">{dec}<span class={`lvl ${lvl.cls}`}>{lvl.text}</span></div>
                    </div>
                    <div class="bar" aria-hidden="true" style="margin-bottom:8px">
                      {([10,20,30,40,50,60,70,80,90]).map(p => (<b class="tick" style={`left:${p}%`}></b>))}
                      <i style={`width: ${Math.min(100, dec)}%`}></i>
                    </div>
                    <p class="narrative">
                      Estás en {s.current10 ?? tile.value}/10 en {label}; tu resultado está {relSign}{rel} {rel >= 0 ? 'sobre' : 'bajo'} el promedio del grupo ({s.collectiveAverage10}/10), ubicándote en el percentil {s.percentile} (mejor que el {s.percentile}% del grupo).
                    </p>
                  </div>
                );
              })}
            </div>
          </section>

      <section class="card">
        <h2>Dimensiones barométricas</h2>
            <div class="grid-2">
              {['madurezDigital','brechaDigital','usoInteligenciaArtificial','culturaOrganizacional'].map(dim => (
                <div>
                  <strong style="display:block; margin-bottom:6px; text-transform: capitalize;">{dim.replace(/([A-Z])/g,' $1').replace(/^./, s => s.toUpperCase())}</strong>
                  {(Object.entries(doc.scores?.[dim] || {})).map(([k,v]) => {
                    const v10 = +(Number(v) * 2.5).toFixed(1);
                    const scope = selectBaremosScope({ subject: doc?.header?.subject }, dim);
                    const dec = mapScoreToBaremadoDecile(dim, v10, { scope });
                    return (
                    <div class="row">
                      <div class="name">{dimLabels[k]}</div>
                      <div class="bar" style="flex:1">
                        {([10,20,30,40,50,60,70,80,90]).map(p => (<b class="tick" style={`left:${p}%`}></b>))}
                        <i style={`width:${Math.min(100, dec)}%`}></i>
                      </div>
                      <div class="val">{dec}</div>
                    </div>
                  );})}
                </div>
              ))}
            </div>
      </section>

      <section class="card">
        <h2>Baremos del segmento</h2>
        <div class="grid-2">
          {dimsOrder.map(dim => {
            const tile = tiles.find(t => t.key === dim) || { value: 0 };
            const s = doc?.summary?.dimensions?.[dim] || { current10: tile.value };
            const scope = selectBaremosScope({ subject: doc?.header?.subject }, dim);
            const rows = getDecilesForScope(dim, { scope });
            const sVal = Number(s.current10 ?? tile.value);
            return (
              <div>
                <strong style="display:block; margin-bottom:6px;">{dimLabels[dim] || dim} · <span class="pill">{scope || 'general'}</span></strong>
                <table class="deciles-table">
                  <thead>
                    <tr><th>Decil</th><th>Rango</th><th>Nivel</th></tr>
                  </thead>
                  <tbody>
                    {rows.map(r => (
                      <tr class={(typeof r.desde === 'number' && typeof r.hasta === 'number' && sVal >= r.desde && sVal <= r.hasta) ? 'row-hl' : ''}>
                        <td>{r.puntaje}</td>
                        <td>{r.desde}–{r.hasta}</td>
                        <td>{r.nivel}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            );
          })}
        </div>
      </section>

      {doc.action_plan && doc.action_plan.iniciativas && (
        <section class="card">
          <h2>Plan de acción priorizado</h2>
          {doc.action_plan.resumenGeneral && (<p class="narrative">{doc.action_plan.resumenGeneral}</p>)}
          {doc.action_plan.criterios && (
            <div class="chips" style="margin-bottom:8px">
              {Array.isArray(doc.action_plan.criterios.top_gaps) && doc.action_plan.criterios.top_gaps.length > 0 && (
                <span class="chip"><strong>Top brechas:</strong>&nbsp;{doc.action_plan.criterios.top_gaps.map(g => `${g.dim} (${g.gap})`).join(', ')}</span>
              )}
              {doc.action_plan.criterios.role && (<span class="chip"><strong>Rol:</strong>&nbsp;{doc.action_plan.criterios.role}</span>)}
              {Array.isArray(doc.action_plan.criterios.signals_from_open_ended) && doc.action_plan.criterios.signals_from_open_ended.length > 0 && (
                <span class="chip"><strong>Señales:</strong>&nbsp;{doc.action_plan.criterios.signals_from_open_ended.join(', ')}</span>
              )}
            </div>
          )}
          <div class="grid-2">
            {(doc.action_plan.iniciativas || []).map(a => (
              <div class="kpi-card">
                <div class="kpi-head"><div class="kpi-title">{a.titulo}</div><div style="display:flex; gap:6px; align-items:center;"><span class="pill">{a.prioridad}</span>{a.type && (<span class="pill">{a.type}</span>)}</div></div>
                <p class="narrative">{a.descripcion}</p>
                <div class="row" style="margin:6px 0"><div class="name">Área:</div><div class="val">{a.areaEnfoque}</div></div>
                {Array.isArray(a.objetivosClave) && a.objetivosClave.length > 0 && (
                  <div style="margin:8px 0">
                    <div class="name" style="margin-bottom:4px">Objetivos clave</div>
                    <ul style="margin:0; padding-left:18px; color:#334155;">
                      {a.objetivosClave.map(o => (<li>{o}</li>))}
                    </ul>
                  </div>
                )}
                {Array.isArray(a.metricasExito) && a.metricasExito.length > 0 && (
                  <div style="margin:8px 0">
                    <div class="name" style="margin-bottom:4px">Métricas de éxito</div>
                    <ul style="margin:0; padding-left:18px; color:#334155;">
                      {a.metricasExito.map(m => (<li><strong>{m.metrica}:</strong> {m.valorObjetivo}</li>))}
                    </ul>
                  </div>
                )}
                {Array.isArray(a.key_results) && a.key_results.length > 0 && (
                  <div style="margin:8px 0">
                    <div class="name" style="margin-bottom:4px">Resultados clave (KR)</div>
                    <ul style="margin:0; padding-left:18px; color:#334155;">
                      {a.key_results.map(kr => (<li><strong>{kr.metric}:</strong> {kr.target}{kr.plazo ? ` · ${kr.plazo}` : ''}</li>))}
                    </ul>
                  </div>
                )}
                {a.metric && a.target && (
                  <div style="margin:8px 0">
                    <div class="name" style="margin-bottom:4px">KPI</div>
                    <div class="val"><strong>{a.metric}:</strong> {a.target}{a.cadencia ? ` · ${a.cadencia}` : ''}</div>
                  </div>
                )}
                <div class="row" style="margin-top:6px"><div class="name">Responsable:</div><div class="val">{a.responsableSugerido}</div></div>
                <div class="row"><div class="name">Plazo:</div><div class="val">{a.plazoEstimado}</div></div>
              </div>
            ))}
          </div>
        </section>
      )}

          <section class="card">
            <h2>Preguntas abiertas</h2>
            <div class="quotes">
              {Object.entries(doc.openEnded || {}).map(([code, arr]) => {
                const question = OPEN_ENDED_QUESTIONS?.[code] || code;
                const answers = Array.isArray(arr) ? arr : [];
                return (
                  <div>
                    <div class="name" style="margin-bottom:6px">{question}</div>
                    {answers.length === 0 ? (
                      <div class="muted">Sin respuestas</div>
                    ) : (
                      answers.map(answer => (<blockquote>“{answer}”</blockquote>))
                    )}
                  </div>
                );
              })}
            </div>
          </section>

          <footer class="muted" style="margin-top:24px;">Generado: {new Date(doc.header?.generatedAt).toLocaleString('es-ES')}</footer>
        </>
      ) : (
        <div class="card">No existe información para este empleado.</div>
      )}
    </div>
  </body>
 </html>
