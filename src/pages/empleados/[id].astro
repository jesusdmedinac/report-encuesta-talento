---
import { promises as fs } from 'fs';
import path from 'path';
import "../../styles/global.css";

export async function getStaticPaths() {
  const dir = path.resolve(process.cwd(), 'src/data/individual');
  try {
    const files = await fs.readdir(dir);
    const jsons = files.filter(f => f.endsWith('.json'));
    return jsons.map(f => ({ params: { id: f.replace('.json', '') } }));
  } catch {
    return [];
  }
}

const { id } = Astro.params;
const dataPath = path.resolve(process.cwd(), 'src/data/individual', `${id}.json`);
const exists = await fs.access(dataPath).then(() => true).catch(() => false);
let doc = null;
if (exists) {
  const raw = await fs.readFile(dataPath, 'utf8');
  doc = JSON.parse(raw);
}

function avgDimension(scores) {
  if (!scores) return 0;
  const vals = Object.values(scores).filter(v => typeof v === 'number' && v > 0);
  if (!vals.length) return 0;
  const s = vals.reduce((a, b) => a + b, 0);
  return +(s / vals.length).toFixed(2);
}

function toTen(n) {
  return +(Number(n) * 2.5).toFixed(1);
}

const tiles = [
  { key: 'madurezDigital', label: 'Madurez Digital' },
  { key: 'brechaDigital', label: 'Competencias Digitales' },
  { key: 'usoInteligenciaArtificial', label: 'Uso de IA' },
  { key: 'culturaOrganizacional', label: 'Cultura Digital' },
].map(t => {
  const raw = avgDimension(doc?.scores?.[t.key]);
  return { ...t, raw, value: toTen(raw) };
});

function levelLabel10(v10) {
  if (v10 <= 6.25) return { text: 'Bajo', cls: 'lvl-low' };
  if (v10 <= 9.25) return { text: 'Medio', cls: 'lvl-mid' };
  return { text: 'Alto', cls: 'lvl-high' };
}
---
<!doctype html>
<html lang="es">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Empleado {id}</title>
    <meta name="robots" content="noindex" />
    <style>
      .container { max-width: 1000px; margin: 0 auto; padding: 24px; }
      .topbar { display:flex; justify-content: space-between; align-items: center; gap: 12px; }
      .muted { color: #64748b; }
      .card { border:1px solid #e5e7eb; border-radius: 12px; padding: 16px; margin: 16px 0; page-break-inside: avoid; }
      .grid-2 { display: grid; grid-template-columns: 1fr 1fr; gap: 16px; }
      @media (max-width: 900px) { .grid-2 { grid-template-columns: 1fr; } }
      h1 { margin: 8px 0; font-size: 1.5rem; }
      h2 { margin: 0 0 8px; font-size: 1.15rem; }
      .pill {display:inline-block; background:#eef2ff; color:#3730a3; padding:.1rem .5rem; border-radius:999px; font-size:.75rem; }
      .back { color: #1d4ed8; text-decoration: none; }
      .btn { background:#0ea5e9; color:#fff; border:none; padding:8px 12px; border-radius:8px; cursor:pointer; }
      .btn:focus { outline:2px solid #0284c7; outline-offset:2px; }

      .tiles { display:grid; grid-template-columns: repeat(4, 1fr); gap: 16px; }
      @media (max-width: 900px) { .tiles { grid-template-columns: 1fr 1fr; } }
      .tile { border:1px solid #e5e7eb; border-radius:12px; padding:14px; background:#fff; }
      .tile .k { font-size:.9rem; color:#475569; }
      .tile .v { font-size:1.8rem; font-weight:700; }
      .lvl { display:inline-block; margin-left:.5rem; padding:.1rem .45rem; border-radius:999px; font-size:.7rem; }
      .lvl-low { background:#fee2e2; color:#7f1d1d; }
      .lvl-mid { background:#fef3c7; color:#78350f; }
      .lvl-high { background:#dcfce7; color:#14532d; }

      .bar { background:#f1f5f9; border-radius: 999px; height: 10px; overflow: hidden; }
      .bar > i { display:block; height:100%; background: linear-gradient(90deg, #60a5fa, #22c55e); }
      .row { display:flex; align-items:center; justify-content: space-between; gap:12px; }
      .row + .row { margin-top: 8px; }
      .row .name { min-width: 180px; font-size:.92rem; color:#0f172a; }
      .row .val { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; color:#334155; }

      .quotes { display:grid; grid-template-columns: 1fr 1fr; gap: 16px; }
      @media (max-width: 900px) { .quotes { grid-template-columns: 1fr; } }
      blockquote { font-style: italic; color:#334155; border-left:4px solid #e5e7eb; margin: 0; padding: 8px 12px; background:#f8fafc; border-radius: 8px; }

      @media print {
        .topbar .back, .topbar .btn { display:none; }
        .container { padding: 0; }
        .tile { -webkit-print-color-adjust: exact; print-color-adjust: exact; }
        h1 { font-size: 1.3rem; }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="topbar">
        <a href="/respuestas" class="back">← Volver al listado</a>
        <button class="btn" onclick="window.print()">Imprimir</button>
      </div>

      {doc ? (
        <>
          <header class="card">
            <div>
              <h1>{doc.header?.subject?.nombreCompleto}</h1>
              {doc.header?.subject?.email && (<div class="muted">{doc.header.subject.email}</div>)}
              <div class="muted">{doc.header?.empresa} · <span class="pill">{new Date(doc.header?.generatedAt).toLocaleString('es-ES')}</span></div>
            </div>
          </header>

          <section class="card">
            <h2>Resumen de KPIs (escala 1–10)</h2>
            <div class="tiles">
              {tiles.map(t => {
                const lvl = levelLabel10(t.value);
                return (
                  <div class="tile">
                    <div class="k">{t.label}</div>
                    <div class="v">{t.value}<span class={`lvl ${lvl.cls}`}>{lvl.text}</span></div>
                    <div class="bar" aria-hidden="true"><i style={`width: ${Math.min(100, (t.value/10)*100)}%`}></i></div>
                  </div>
                );
              })}
            </div>
            {doc?.summary?.dimensions && (
              <div style="margin-top:12px">
                {Object.entries(doc.summary.dimensions).map(([dim, s]) => (
                  <div class="row">
                    <div class="name">{dim.replace(/([A-Z])/g,' $1').replace(/^./, s => s.toUpperCase())}</div>
                    <div style="flex:1"></div>
                    <div class="val" title="Valor actual">{s.current10}</div>
                    <div class="val" title="Meta">/ {s.target10}</div>
                    <div class="val" title="Brecha">(Δ {s.gap10})</div>
                    <div class="val" title="Promedio cohorte">↔ {s.collectiveAverage10}</div>
                  </div>
                ))}
              </div>
            )}
          </section>

          <section class="card">
            <h2>Dimensiones (escala 1–10)</h2>
            <div class="grid-2">
              {['madurezDigital','brechaDigital','usoInteligenciaArtificial','culturaOrganizacional'].map(dim => (
                <div>
                  <strong style="display:block; margin-bottom:6px; text-transform: capitalize;">{dim.replace(/([A-Z])/g,' $1').replace(/^./, s => s.toUpperCase())}</strong>
                  {(Object.entries(doc.scores?.[dim] || {})).map(([k,v]) => {
                    const v10 = +(Number(v) * 2.5).toFixed(1);
                    return (
                    <div class="row">
                      <div class="name">{k}</div>
                      <div class="bar" style="flex:1"><i style={`width:${Math.min(100,(v10/10)*100)}%`}></i></div>
                      <div class="val">{v10}</div>
                    </div>
                  );})}
                </div>
              ))}
            </div>
          </section>

          <section class="card">
            <h2>Respuestas abiertas</h2>
            <div class="quotes">
              {Object.entries(doc.openEnded || {}).map(([code, arr]) => (
                <div>
                  <div class="muted" style="margin-bottom:6px;">{code}</div>
                  {(arr || []).map(t => (<blockquote>“{t}”</blockquote>))}
                </div>
              ))}
            </div>
          </section>

          <footer class="muted" style="margin-top:24px;">Generado: {new Date(doc.header?.generatedAt).toLocaleString('es-ES')}</footer>
        </>
      ) : (
        <div class="card">No existe información para este empleado.</div>
      )}
    </div>
  </body>
 </html>
