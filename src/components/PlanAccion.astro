---
const {
    titulo = "Plan de Acci√≥n Organizacional",
    resumen = "Basado en los resultados del diagn√≥stico de Profermaco, se presenta un plan de acci√≥n estrat√©gico y realista de transformaci√≥n digital ferretera en 4 fases para desarrollar gradualmente las competencias digitales desde su nivel actual (1.7/10) hacia un nivel intermedio s√≥lido (3.75/10). Este plan de 15 meses est√° dise√±ado espec√≠ficamente para la industria ferretera, enfoc√°ndose en mejoras pr√°cticas, graduales y sostenibles que generen impacto real en la operaci√≥n diaria.",
    metricasResumen = [
        { valor: "2.05", etiqueta: "Oportunidad de Crecimiento", prioridad: "Importante", color: "var(--color-critical)" },
        { valor: "240h", etiqueta: "Capacitaci√≥n Pr√°ctica", prioridad: "Realista", color: "var(--color-high-priority)" },
        { valor: "15", etiqueta: "Meses de Duraci√≥n", prioridad: "Gradual", color: "var(--color-medium-priority)" },
        { valor: "3.75", etiqueta: "Meta Intermedia", prioridad: "Alcanzable", color: "var(--color-low-priority)" }
    ],
    tracker = {
        titulo: "Progreso del Plan de Transformaci√≥n Digital Ferretera",
        subtitulo: "15 meses para desarrollar competencias digitales s√≥lidas en el sector ferretero",
        hitos: ["Inicio", "4 meses", "10 meses", "15 meses"]
    },
    roadmap = [
        // Fases del roadmap como un array de objetos
    ],
    beneficios = {
        cuantificables: [
            { metrica: "Eficiencia en gesti√≥n de inventarios", valor: "+35%" },
            { metrica: "Tiempo en procesos manuales", valor: "-40%" },
            { metrica: "Satisfacci√≥n del cliente", valor: "+30%" },
            { metrica: "Precisi√≥n en an√°lisis de ventas", valor: "+45%" }
        ],
        cualitativos: [
            "Referente digital en el sector ferretero",
            "Equipo motivado y capacitado digitalmente",
            "Ventaja competitiva sostenible",
            "Mejor experiencia del cliente ferretero",
            "Procesos optimizados y automatizados"
        ]
    }
} = Astro.props;
---
<section>
    <h2>{titulo}</h2>
    
    <div class="exec-summary">
        <p>{resumen}</p>
    </div>

    <div class="metrics-summary">
        {metricasResumen.map((metrica: any) => (
            <div class={`metric-card ${metrica.prioridad.toLowerCase()}`}>
                <div class="metric-value" style={`color: ${metrica.color};`}>{metrica.valor}</div>
                <div class="metric-label">{metrica.etiqueta}</div>
                <div class={`priority-badge ${metrica.prioridad.toLowerCase()}`}>{metrica.prioridad}</div>
            </div>
        ))}
    </div>

    <div class="progress-tracker">
        <div class="progress-header">
            <h3>{tracker.titulo}</h3>
            <p>{tracker.subtitulo}</p>
        </div>
        <div class="progress-bar">
            <div class="progress-fill" id="overall-progress"></div>
        </div>
        <div class="milestones">
            {tracker.hitos.map((hito: any, index: any) => (
                <div class="milestone">
                    <div class={`milestone-dot ${index === 0 ? 'current' : ''}`}></div>
                    <div class="milestone-label">{hito}</div>
                </div>
            ))}
        </div>
    </div>

    <div class="roadmap-content" style="background: white; border-radius: 20px; box-shadow: 0 8px 30px rgba(0,0,0,0.1); padding: 40px; margin-bottom: 30px;">
        <!-- Renderizado din√°mico de las fases del roadmap -->
    </div>
    
    <div class="roadmap-container">
        <div class="roadmap-header" style="background: white; color: var(--primary);">
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px;">
                <div style="background: white; border-radius: 16px; padding: 25px; box-shadow: 0 4px 20px rgba(0,0,0,0.05);">
                    <h4 style="color: var(--color-low-priority); margin-bottom: 20px; display: flex; align-items: center; gap: 10px;">
                        üìà Beneficios Cuantificables
                    </h4>
                    <div style="display: flex; flex-direction: column; gap: 15px;">
                        {beneficios.cuantificables.map((b: any) => (
                            <div style="display: flex; justify-content: space-between; align-items: center; padding: 10px; background: #f8f9fa; border-radius: 8px;">
                                <span style="font-size: 0.9rem;">{b.metrica}</span>
                                <span style="font-weight: 700; color: var(--color-low-priority);">{b.valor}</span>
                            </div>
                        ))}
                    </div>
                </div>

                <div style="background: white; border-radius: 16px; padding: 25px; box-shadow: 0 4px 20px rgba(0,0,0,0.05);">
                    <h4 style="color: var(--color-company); margin-bottom: 20px; display: flex; align-items: center; gap: 10px;">
                        üéØ Beneficios Cualitativos
                    </h4>
                    <div style="display: flex; flex-direction: column; gap: 12px;">
                        {beneficios.cualitativos.map((b: any) => (
                            <div style="display: flex; align-items: center; gap: 10px;">
                                <span style="color: var(--color-company); font-size: 1.2rem;">‚úì</span>
                                <span style="font-size: 0.9rem;">{b}</span>
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    function togglePhase(phaseNumber: any) {
        const content = document.getElementById(`phase-${phaseNumber}`);
        const phase = content?.parentElement;
        
        // Toggle active state
        if (content?.classList.contains('active')) {
            content.classList.remove('active');
            phase?.classList.remove('active');
        } else {
            // Close all other phases
            document.querySelectorAll('.toggle-content').forEach(c => c.classList.remove('active'));
            document.querySelectorAll('.phase').forEach(p => p.classList.remove('active'));
            
            // Open selected phase
            content?.classList.add('active');
            phase?.classList.add('active');
            
            // Update progress based on phase
            updateProgress(phaseNumber);
        }
    }
    
    function updateProgress(phase: any) {
        const progressFill = document.getElementById('overall-progress') as HTMLElement;
        const milestones = document.querySelectorAll('.milestone-dot') as NodeListOf<HTMLElement>;
        
        const progressValues = [0, 25, 50, 75, 100]; // Ajustado para 4 fases
        progressFill.style.width = progressValues[phase] + '%';
        
        // Update milestone states
        milestones.forEach((milestone, index) => {
            milestone.classList.remove('completed', 'current');
            if (index < phase) {
                milestone.classList.add('completed');
            } else if (index === phase) {
                milestone.classList.add('current');
            }
        });
    }
    
    // Initialize roadmap with first phase open
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(() => {
            togglePhase(1);
            
            // Animate progress bar on load
            setTimeout(() => {
              const progressFill = document.getElementById('overall-progress') as HTMLElement;
              progressFill.style.width = '25%';
            }, 1000);
        }, 500);
    });
</script>
