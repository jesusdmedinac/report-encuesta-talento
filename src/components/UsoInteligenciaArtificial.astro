---
const {
    titulo = "Uso de la Inteligencia Artificial",
    graficos = [
        {
            titulo: "Interés y preparación",
            porcentaje: 82,
            descripcion: "El equipo muestra una disposición alta para aprender y aplicar IA. Existe capital humano listo para profundizar en casos de uso estratégicos.",
            idGradiente: "gradient-adoption",
            coloresGradiente: ["#10B981", "#34D399", "#6EE7B7"]
        },
        {
            titulo: "Uso en la práctica",
            porcentaje: 68,
            descripcion: "Los pilotos y automatizaciones existentes se encuentran en etapa intermedia; el reto es llevarlos a escala operativa.",
            idGradiente: "gradient-usage",
            coloresGradiente: ["#F59E0B", "#FBBF24", "#FDE047"]
        },
        {
            titulo: "Gobernanza y ética",
            porcentaje: 72,
            descripcion: "Hay sensibilidad sobre riesgos y verificación. Formalizar lineamientos aumentará la confianza para habilitar más casos de IA.",
            idGradiente: "gradient-ethics",
            coloresGradiente: ["#8B5CF6", "#A78BFA", "#C4B5FD"]
        }
    ],
    resumen = "<strong>Oportunidad estratégica:</strong> Existe una base entusiasta para la IA: la preparación y el interés superan el 80 %, mientras que el uso formal y la gobernanza se mantienen en fase intermedia. Escalar casos con lineamientos claros permitirá convertir ese potencial en impacto medible."
} = Astro.props;
---
<section>
    <h2>{titulo}</h2>
    
    <div class="circular-charts-wrapper">
        {graficos.map((grafico: any) => (
            <div class="circular-chart-item">
                <div class="chart-title">{grafico.titulo}</div>
                <div class="circular-progress">
                    <svg class="progress-ring" width="180" height="180">
                        <defs>
                            <linearGradient id={grafico.idGradiente} x1="0%" y1="0%" x2="100%" y2="100%">
                                <stop offset="0%" style={`stop-color:${grafico.coloresGradiente[0]};stop-opacity:1`} />
                                <stop offset="50%" style={`stop-color:${grafico.coloresGradiente[1]};stop-opacity:1`} />
                                <stop offset="100%" style={`stop-color:${grafico.coloresGradiente[2]};stop-opacity:1`} />
                            </linearGradient>
                        </defs>
                        <circle class="progress-bg" cx="90" cy="90" r="75"></circle>
                        <circle class="progress-bar" cx="90" cy="90" r="75" stroke={`url(#${grafico.idGradiente})`} data-percent={grafico.porcentaje}></circle>
                    </svg>
                    <div class="progress-text">
                        <div class="progress-percentage">{grafico.porcentaje}%</div>
                        <div class="progress-label">Avance</div>
                    </div>
                </div>
                <div class="chart-details">
                    <div class="chart-description">
                        {grafico.descripcion}
                    </div>
                </div>
            </div>
        ))}
    </div>
    
    <div style="background: #f8f9fa; border-radius: 12px; padding: 20px; margin-top: 25px; border-left: 4px solid #2563EB;">
        <p style="margin: 0; font-size: 0.95rem; line-height: 1.6; color: var(--text-primary);" set:html={resumen} />
    </div>
</section>

<script>
    function animateCircularProgress() {
        const progressBars = document.querySelectorAll<SVGCircleElement>('.progress-bar');

        progressBars.forEach((bar, index) => {
            const radius = bar.r.baseVal.value || 75;
            const circumference = 2 * Math.PI * radius;
            const percentage = Number(bar.dataset.percent || '0');

            bar.style.strokeDasharray = `${circumference} ${circumference}`;
            bar.style.strokeDashoffset = `${circumference}`;

            const runAnimation = () => {
                const offset = circumference - (percentage / 100) * circumference;
                bar.style.strokeDashoffset = `${offset}`;
            };

            const delay = 200 * index;
            if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
                runAnimation();
            } else {
                setTimeout(() => requestAnimationFrame(runAnimation), 400 + delay);
            }
        });
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', animateCircularProgress, { once: true });
    } else {
        animateCircularProgress();
    }
</script>
